direction: right

# 1) Domain Model (UML-Like) -----------------------------------
DomainModel: {
  label: "Domain Model (DDD)"
  direction: down

  # Aggregate Root: Order
  Order: "Order (Aggregate Root)" {
    shape: class
    # Key fields
    +customerId: "CustomerId"
    +deliveryAddress: "StreetAddress"
    +warehouseId: "WarehouseId"
    +price: "Money"
    +shippingCost: "Money"
    +items: "List<OrderItem>"
    +orderStatus: "OrderStatus"
    +failureMessages: "List<String>"

    # Domain methods (omitting trivial setters/getters)
    +initializeOrder()
    +validateOrder()
    +calculateItemsTotalAmount(): BigDecimal
    +initiateOrder()
    +updateOrderStatus()
    +initReviewPayment()
    +initApprove()
    +approve()
    +cancelApprove()
    +pay()
    +initCancel()
    +cancel()
  }

  # Entity: OrderItem
  OrderItem: "OrderItem (Entity)" {
    shape: class
    +orderId: "OrderId"
    +product: "Product"
    +quantity: int
    +price: "Money"
    +subTotal: "Money"

    +isPriceValid(): boolean
    +calculateSubTotal()
  }

  # Entity: Warehouse
  Warehouse: "Warehouse (Entity)" {
    shape: class
    +name: String
    +latitude: Double
    +longitude: Double
    +distance: Double
  }

  # Entity: Product
  Product: "Product (Entity)" {
    shape: class
    +name: String
    +price: Money

    +updateWithConfirmedNameAndPrice(name String, price Money)
  }

  # Domain Service
  OrderDomainServiceImpl: "OrderDomainServiceImpl (Domain Service)" {
    shape: class
    +validateAndInitiateOrder(): OrderCreatedEvent
    +initApproveOrder(): OrderApprovedEvent
    +approveOrder(order Order)
    +initReviewPayment(order Order)
    +cancelApproveOrder(): OrderApproveFailedEvent
  }

  # Relationships (example)
  Order -> OrderItem: "contains 1..*"
  OrderItem -> Product: "refers to 1..1"
  Order -> Warehouse: "refers to 1..1"
}

# 2) Value Objects ---------------------------------------------
ValueObjects: {
  label: "Value Objects"
  direction: down

  Money: "Money <<ValueObject>>" {
    shape: class
    +amount: "BigDecimal"
    +isGreaterThanZero(): boolean
    +isGreaterThan(m Money): boolean
    +add(m Money): Money
    +subtract(m Money): Money
    +multiply(multiplier int): Money
    # Under the hood it uses scale=2 and RoundingMode.HALF_EVEN
  }

  OrderId: "OrderId <<ValueObject>>" {
    shape: class
    # Typically a UUID wrapper
  }

  StreetAddress: "StreetAddress <<ValueObject>>" {
    shape: class
    +street: "String"
    +city: "String"
    +postalCode: "String"
  }

  WarehouseId: "WarehouseId <<ValueObject>>" {
    shape: class
  }

  CustomerId: "CustomerId <<ValueObject>>" {
    shape: class
  }

  OrderStatus: "OrderStatus <<ValueObject>>" {
    shape: class
    # AWAITING_PAYMENT, REVIEW_PAYMENT, APPROVED_PENDING, APPROVED, CANCEL_PENDING, CANCELLED
  }
}

# 3) Domain Events ---------------------------------------------
DomainEvents: {
  label: "Domain Events"
  direction: down

  # Base class
  OrderEvent: "OrderEvent (abstract?)" {
    shape: class
    +order: "Order"
    +createdAt: "ZonedDateTime"
    +fire()
  }

  # Concrete events
  OrderCreatedEvent: "OrderCreatedEvent" {
    shape: class
    +OrderCreatedEvent()
    +fire()
  }

  OrderApprovedEvent: "OrderApprovedEvent" {
    shape: class
    +OrderApprovedEvent()
    +fire()
  }

  OrderApproveFailedEvent: "OrderApproveFailedEvent" {
    shape: class
    +OrderApproveFailedEvent()
    +fire()
  }

  OrderStatusUpdatedEvent: "OrderStatusUpdatedEvent" {
    shape: class
    +OrderStatusUpdatedEvent()
    +fire()
  }

  # Example relationships to highlight extension from base
  OrderEvent -> OrderCreatedEvent: "Inheritance"
  OrderEvent -> OrderApprovedEvent: "Inheritance"
  OrderEvent -> OrderApproveFailedEvent: "Inheritance"
  OrderEvent -> OrderStatusUpdatedEvent: "Inheritance"
}

# 4) SQL Schema (tables) ---------------------------------------
DBSchema: {
  label: "DB Schema"
  direction: right

  orders: {
    shape: sql_table
    label: "orders"
    id: "UUID {PK, IDX}"
    customer_id: "UUID"
    customer_address: "TEXT"
    warehouse_id: "UUID"
    total_amount: "BIGINT"
    shipping_cost: "BIGINT"
    order_status: "VARCHAR(50)"
    failure_messages: "TEXT"
    created_at: "TIMESTAMP"
    updated_at: "TIMESTAMP"
    deleted_at: "TIMESTAMP"
  }

  order_address: {
    shape: sql_table
    label: "order_address"
    id: "UUID {PK}"
    city: "VARCHAR(100)"
    latitude: "DOUBLE PRECISION"
    longitude: "DOUBLE PRECISION"
    postal_code: "VARCHAR(20)"
    street: "VARCHAR(255)"
    order_id: "UUID"
  }

  order_items: {
    shape: sql_table
    label: "order_items"
    id: "BIGINT {PK}"
    order_id: "UUID {PK}"
    product_id: "UUID"
    inventory_id: "UUID"
    product_name: "VARCHAR(255)"
    price: "BIGINT"
    quantity: "INT"
    sub_total: "NUMERIC"
    created_at: "TIMESTAMP"
    updated_at: "TIMESTAMP"
    deleted_at: "TIMESTAMP"
  }

  payments: {
    shape: sql_table
    label: "payments"
    id: "UUID {PK}"
    order_id: "UUID"
    payment_method: "VARCHAR(50)"
    payment_status: "VARCHAR(50)"
    payment_date: "TIMESTAMP"
    payment_amount: "NUMERIC"
    payment_reference: "TEXT"
    payment_proof_url: "TEXT"
    created_at: "TIMESTAMP"
    updated_at: "TIMESTAMP"
    deleted_at: "TIMESTAMP"
  }

  # Relationships
  orders -> order_address: "1 -> 0..*"
  orders -> order_items: "1 -> 0..*"
  orders -> payments: "1 -> 0..*"
}

# References across containers (optional)
DomainModel.Order -> DBSchema.orders: "maps to table orders"
DomainModel.OrderItem -> DBSchema.order_items: "maps to table order_items"
DomainModel.Product -> DBSchema.order_items: "product_id reference"
