/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.mwc.kafka.order.avro.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class OrderCreateAvroModel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8909682826473499965L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OrderCreateAvroModel\",\"namespace\":\"com.mwc.kafka.order.avro.model\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"sagaId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerAddress\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"warehouseId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"totalAmount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"shippingCost\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"orderStatus\",\"type\":{\"type\":\"enum\",\"name\":\"OrderStatus\",\"symbols\":[\"AWAITING_PAYMENT\",\"REVIEW_PAYMENT\",\"APPROVED\",\"CANCEL_PENDING\",\"CANCELLED\"]}},{\"name\":\"items\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"OrderItem\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"productId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"price\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"quantity\",\"type\":\"int\"},{\"name\":\"subTotal\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.UUIDConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<OrderCreateAvroModel> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<OrderCreateAvroModel> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<OrderCreateAvroModel> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<OrderCreateAvroModel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<OrderCreateAvroModel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this OrderCreateAvroModel to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a OrderCreateAvroModel from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a OrderCreateAvroModel instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static OrderCreateAvroModel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.UUID id;
  private java.util.UUID sagaId;
  private java.time.Instant createdAt;
  private java.util.UUID customerId;
  private java.lang.String customerAddress;
  private java.util.UUID warehouseId;
  private java.math.BigDecimal totalAmount;
  private java.math.BigDecimal shippingCost;
  private com.mwc.kafka.order.avro.model.OrderStatus orderStatus;
  private java.util.List<com.mwc.kafka.order.avro.model.OrderItem> items;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public OrderCreateAvroModel() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param sagaId The new value for sagaId
   * @param createdAt The new value for createdAt
   * @param customerId The new value for customerId
   * @param customerAddress The new value for customerAddress
   * @param warehouseId The new value for warehouseId
   * @param totalAmount The new value for totalAmount
   * @param shippingCost The new value for shippingCost
   * @param orderStatus The new value for orderStatus
   * @param items The new value for items
   */
  public OrderCreateAvroModel(java.util.UUID id, java.util.UUID sagaId, java.time.Instant createdAt, java.util.UUID customerId, java.lang.String customerAddress, java.util.UUID warehouseId, java.math.BigDecimal totalAmount, java.math.BigDecimal shippingCost, com.mwc.kafka.order.avro.model.OrderStatus orderStatus, java.util.List<com.mwc.kafka.order.avro.model.OrderItem> items) {
    this.id = id;
    this.sagaId = sagaId;
    this.createdAt = createdAt.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.customerId = customerId;
    this.customerAddress = customerAddress;
    this.warehouseId = warehouseId;
    this.totalAmount = totalAmount;
    this.shippingCost = shippingCost;
    this.orderStatus = orderStatus;
    this.items = items;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return sagaId;
    case 2: return createdAt;
    case 3: return customerId;
    case 4: return customerAddress;
    case 5: return warehouseId;
    case 6: return totalAmount;
    case 7: return shippingCost;
    case 8: return orderStatus;
    case 9: return items;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      new org.apache.avro.Conversions.UUIDConversion(),
      new org.apache.avro.Conversions.UUIDConversion(),
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      new org.apache.avro.Conversions.UUIDConversion(),
      null,
      new org.apache.avro.Conversions.UUIDConversion(),
      new org.apache.avro.Conversions.DecimalConversion(),
      new org.apache.avro.Conversions.DecimalConversion(),
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.util.UUID)value$; break;
    case 1: sagaId = (java.util.UUID)value$; break;
    case 2: createdAt = (java.time.Instant)value$; break;
    case 3: customerId = (java.util.UUID)value$; break;
    case 4: customerAddress = value$ != null ? value$.toString() : null; break;
    case 5: warehouseId = (java.util.UUID)value$; break;
    case 6: totalAmount = (java.math.BigDecimal)value$; break;
    case 7: shippingCost = (java.math.BigDecimal)value$; break;
    case 8: orderStatus = (com.mwc.kafka.order.avro.model.OrderStatus)value$; break;
    case 9: items = (java.util.List<com.mwc.kafka.order.avro.model.OrderItem>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.util.UUID getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.util.UUID value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'sagaId' field.
   * @return The value of the 'sagaId' field.
   */
  public java.util.UUID getSagaId() {
    return sagaId;
  }


  /**
   * Sets the value of the 'sagaId' field.
   * @param value the value to set.
   */
  public void setSagaId(java.util.UUID value) {
    this.sagaId = value;
  }

  /**
   * Gets the value of the 'createdAt' field.
   * @return The value of the 'createdAt' field.
   */
  public java.time.Instant getCreatedAt() {
    return createdAt;
  }


  /**
   * Sets the value of the 'createdAt' field.
   * @param value the value to set.
   */
  public void setCreatedAt(java.time.Instant value) {
    this.createdAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'customerId' field.
   * @return The value of the 'customerId' field.
   */
  public java.util.UUID getCustomerId() {
    return customerId;
  }


  /**
   * Sets the value of the 'customerId' field.
   * @param value the value to set.
   */
  public void setCustomerId(java.util.UUID value) {
    this.customerId = value;
  }

  /**
   * Gets the value of the 'customerAddress' field.
   * @return The value of the 'customerAddress' field.
   */
  public java.lang.String getCustomerAddress() {
    return customerAddress;
  }


  /**
   * Sets the value of the 'customerAddress' field.
   * @param value the value to set.
   */
  public void setCustomerAddress(java.lang.String value) {
    this.customerAddress = value;
  }

  /**
   * Gets the value of the 'warehouseId' field.
   * @return The value of the 'warehouseId' field.
   */
  public java.util.UUID getWarehouseId() {
    return warehouseId;
  }


  /**
   * Sets the value of the 'warehouseId' field.
   * @param value the value to set.
   */
  public void setWarehouseId(java.util.UUID value) {
    this.warehouseId = value;
  }

  /**
   * Gets the value of the 'totalAmount' field.
   * @return The value of the 'totalAmount' field.
   */
  public java.math.BigDecimal getTotalAmount() {
    return totalAmount;
  }


  /**
   * Sets the value of the 'totalAmount' field.
   * @param value the value to set.
   */
  public void setTotalAmount(java.math.BigDecimal value) {
    this.totalAmount = value;
  }

  /**
   * Gets the value of the 'shippingCost' field.
   * @return The value of the 'shippingCost' field.
   */
  public java.math.BigDecimal getShippingCost() {
    return shippingCost;
  }


  /**
   * Sets the value of the 'shippingCost' field.
   * @param value the value to set.
   */
  public void setShippingCost(java.math.BigDecimal value) {
    this.shippingCost = value;
  }

  /**
   * Gets the value of the 'orderStatus' field.
   * @return The value of the 'orderStatus' field.
   */
  public com.mwc.kafka.order.avro.model.OrderStatus getOrderStatus() {
    return orderStatus;
  }


  /**
   * Sets the value of the 'orderStatus' field.
   * @param value the value to set.
   */
  public void setOrderStatus(com.mwc.kafka.order.avro.model.OrderStatus value) {
    this.orderStatus = value;
  }

  /**
   * Gets the value of the 'items' field.
   * @return The value of the 'items' field.
   */
  public java.util.List<com.mwc.kafka.order.avro.model.OrderItem> getItems() {
    return items;
  }


  /**
   * Sets the value of the 'items' field.
   * @param value the value to set.
   */
  public void setItems(java.util.List<com.mwc.kafka.order.avro.model.OrderItem> value) {
    this.items = value;
  }

  /**
   * Creates a new OrderCreateAvroModel RecordBuilder.
   * @return A new OrderCreateAvroModel RecordBuilder
   */
  public static com.mwc.kafka.order.avro.model.OrderCreateAvroModel.Builder newBuilder() {
    return new com.mwc.kafka.order.avro.model.OrderCreateAvroModel.Builder();
  }

  /**
   * Creates a new OrderCreateAvroModel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new OrderCreateAvroModel RecordBuilder
   */
  public static com.mwc.kafka.order.avro.model.OrderCreateAvroModel.Builder newBuilder(com.mwc.kafka.order.avro.model.OrderCreateAvroModel.Builder other) {
    if (other == null) {
      return new com.mwc.kafka.order.avro.model.OrderCreateAvroModel.Builder();
    } else {
      return new com.mwc.kafka.order.avro.model.OrderCreateAvroModel.Builder(other);
    }
  }

  /**
   * Creates a new OrderCreateAvroModel RecordBuilder by copying an existing OrderCreateAvroModel instance.
   * @param other The existing instance to copy.
   * @return A new OrderCreateAvroModel RecordBuilder
   */
  public static com.mwc.kafka.order.avro.model.OrderCreateAvroModel.Builder newBuilder(com.mwc.kafka.order.avro.model.OrderCreateAvroModel other) {
    if (other == null) {
      return new com.mwc.kafka.order.avro.model.OrderCreateAvroModel.Builder();
    } else {
      return new com.mwc.kafka.order.avro.model.OrderCreateAvroModel.Builder(other);
    }
  }

  /**
   * RecordBuilder for OrderCreateAvroModel instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OrderCreateAvroModel>
    implements org.apache.avro.data.RecordBuilder<OrderCreateAvroModel> {

    private java.util.UUID id;
    private java.util.UUID sagaId;
    private java.time.Instant createdAt;
    private java.util.UUID customerId;
    private java.lang.String customerAddress;
    private java.util.UUID warehouseId;
    private java.math.BigDecimal totalAmount;
    private java.math.BigDecimal shippingCost;
    private com.mwc.kafka.order.avro.model.OrderStatus orderStatus;
    private java.util.List<com.mwc.kafka.order.avro.model.OrderItem> items;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.mwc.kafka.order.avro.model.OrderCreateAvroModel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.sagaId)) {
        this.sagaId = data().deepCopy(fields()[1].schema(), other.sagaId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[2].schema(), other.createdAt);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.customerId)) {
        this.customerId = data().deepCopy(fields()[3].schema(), other.customerId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.customerAddress)) {
        this.customerAddress = data().deepCopy(fields()[4].schema(), other.customerAddress);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.warehouseId)) {
        this.warehouseId = data().deepCopy(fields()[5].schema(), other.warehouseId);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.totalAmount)) {
        this.totalAmount = data().deepCopy(fields()[6].schema(), other.totalAmount);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.shippingCost)) {
        this.shippingCost = data().deepCopy(fields()[7].schema(), other.shippingCost);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.orderStatus)) {
        this.orderStatus = data().deepCopy(fields()[8].schema(), other.orderStatus);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.items)) {
        this.items = data().deepCopy(fields()[9].schema(), other.items);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
    }

    /**
     * Creates a Builder by copying an existing OrderCreateAvroModel instance
     * @param other The existing instance to copy.
     */
    private Builder(com.mwc.kafka.order.avro.model.OrderCreateAvroModel other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sagaId)) {
        this.sagaId = data().deepCopy(fields()[1].schema(), other.sagaId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[2].schema(), other.createdAt);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.customerId)) {
        this.customerId = data().deepCopy(fields()[3].schema(), other.customerId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.customerAddress)) {
        this.customerAddress = data().deepCopy(fields()[4].schema(), other.customerAddress);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.warehouseId)) {
        this.warehouseId = data().deepCopy(fields()[5].schema(), other.warehouseId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.totalAmount)) {
        this.totalAmount = data().deepCopy(fields()[6].schema(), other.totalAmount);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.shippingCost)) {
        this.shippingCost = data().deepCopy(fields()[7].schema(), other.shippingCost);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.orderStatus)) {
        this.orderStatus = data().deepCopy(fields()[8].schema(), other.orderStatus);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.items)) {
        this.items = data().deepCopy(fields()[9].schema(), other.items);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.util.UUID getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.mwc.kafka.order.avro.model.OrderCreateAvroModel.Builder setId(java.util.UUID value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.mwc.kafka.order.avro.model.OrderCreateAvroModel.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'sagaId' field.
      * @return The value.
      */
    public java.util.UUID getSagaId() {
      return sagaId;
    }


    /**
      * Sets the value of the 'sagaId' field.
      * @param value The value of 'sagaId'.
      * @return This builder.
      */
    public com.mwc.kafka.order.avro.model.OrderCreateAvroModel.Builder setSagaId(java.util.UUID value) {
      validate(fields()[1], value);
      this.sagaId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'sagaId' field has been set.
      * @return True if the 'sagaId' field has been set, false otherwise.
      */
    public boolean hasSagaId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'sagaId' field.
      * @return This builder.
      */
    public com.mwc.kafka.order.avro.model.OrderCreateAvroModel.Builder clearSagaId() {
      sagaId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'createdAt' field.
      * @return The value.
      */
    public java.time.Instant getCreatedAt() {
      return createdAt;
    }


    /**
      * Sets the value of the 'createdAt' field.
      * @param value The value of 'createdAt'.
      * @return This builder.
      */
    public com.mwc.kafka.order.avro.model.OrderCreateAvroModel.Builder setCreatedAt(java.time.Instant value) {
      validate(fields()[2], value);
      this.createdAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'createdAt' field has been set.
      * @return True if the 'createdAt' field has been set, false otherwise.
      */
    public boolean hasCreatedAt() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'createdAt' field.
      * @return This builder.
      */
    public com.mwc.kafka.order.avro.model.OrderCreateAvroModel.Builder clearCreatedAt() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'customerId' field.
      * @return The value.
      */
    public java.util.UUID getCustomerId() {
      return customerId;
    }


    /**
      * Sets the value of the 'customerId' field.
      * @param value The value of 'customerId'.
      * @return This builder.
      */
    public com.mwc.kafka.order.avro.model.OrderCreateAvroModel.Builder setCustomerId(java.util.UUID value) {
      validate(fields()[3], value);
      this.customerId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'customerId' field has been set.
      * @return True if the 'customerId' field has been set, false otherwise.
      */
    public boolean hasCustomerId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'customerId' field.
      * @return This builder.
      */
    public com.mwc.kafka.order.avro.model.OrderCreateAvroModel.Builder clearCustomerId() {
      customerId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'customerAddress' field.
      * @return The value.
      */
    public java.lang.String getCustomerAddress() {
      return customerAddress;
    }


    /**
      * Sets the value of the 'customerAddress' field.
      * @param value The value of 'customerAddress'.
      * @return This builder.
      */
    public com.mwc.kafka.order.avro.model.OrderCreateAvroModel.Builder setCustomerAddress(java.lang.String value) {
      validate(fields()[4], value);
      this.customerAddress = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'customerAddress' field has been set.
      * @return True if the 'customerAddress' field has been set, false otherwise.
      */
    public boolean hasCustomerAddress() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'customerAddress' field.
      * @return This builder.
      */
    public com.mwc.kafka.order.avro.model.OrderCreateAvroModel.Builder clearCustomerAddress() {
      customerAddress = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'warehouseId' field.
      * @return The value.
      */
    public java.util.UUID getWarehouseId() {
      return warehouseId;
    }


    /**
      * Sets the value of the 'warehouseId' field.
      * @param value The value of 'warehouseId'.
      * @return This builder.
      */
    public com.mwc.kafka.order.avro.model.OrderCreateAvroModel.Builder setWarehouseId(java.util.UUID value) {
      validate(fields()[5], value);
      this.warehouseId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'warehouseId' field has been set.
      * @return True if the 'warehouseId' field has been set, false otherwise.
      */
    public boolean hasWarehouseId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'warehouseId' field.
      * @return This builder.
      */
    public com.mwc.kafka.order.avro.model.OrderCreateAvroModel.Builder clearWarehouseId() {
      warehouseId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalAmount' field.
      * @return The value.
      */
    public java.math.BigDecimal getTotalAmount() {
      return totalAmount;
    }


    /**
      * Sets the value of the 'totalAmount' field.
      * @param value The value of 'totalAmount'.
      * @return This builder.
      */
    public com.mwc.kafka.order.avro.model.OrderCreateAvroModel.Builder setTotalAmount(java.math.BigDecimal value) {
      validate(fields()[6], value);
      this.totalAmount = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'totalAmount' field has been set.
      * @return True if the 'totalAmount' field has been set, false otherwise.
      */
    public boolean hasTotalAmount() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'totalAmount' field.
      * @return This builder.
      */
    public com.mwc.kafka.order.avro.model.OrderCreateAvroModel.Builder clearTotalAmount() {
      totalAmount = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'shippingCost' field.
      * @return The value.
      */
    public java.math.BigDecimal getShippingCost() {
      return shippingCost;
    }


    /**
      * Sets the value of the 'shippingCost' field.
      * @param value The value of 'shippingCost'.
      * @return This builder.
      */
    public com.mwc.kafka.order.avro.model.OrderCreateAvroModel.Builder setShippingCost(java.math.BigDecimal value) {
      validate(fields()[7], value);
      this.shippingCost = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'shippingCost' field has been set.
      * @return True if the 'shippingCost' field has been set, false otherwise.
      */
    public boolean hasShippingCost() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'shippingCost' field.
      * @return This builder.
      */
    public com.mwc.kafka.order.avro.model.OrderCreateAvroModel.Builder clearShippingCost() {
      shippingCost = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderStatus' field.
      * @return The value.
      */
    public com.mwc.kafka.order.avro.model.OrderStatus getOrderStatus() {
      return orderStatus;
    }


    /**
      * Sets the value of the 'orderStatus' field.
      * @param value The value of 'orderStatus'.
      * @return This builder.
      */
    public com.mwc.kafka.order.avro.model.OrderCreateAvroModel.Builder setOrderStatus(com.mwc.kafka.order.avro.model.OrderStatus value) {
      validate(fields()[8], value);
      this.orderStatus = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'orderStatus' field has been set.
      * @return True if the 'orderStatus' field has been set, false otherwise.
      */
    public boolean hasOrderStatus() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'orderStatus' field.
      * @return This builder.
      */
    public com.mwc.kafka.order.avro.model.OrderCreateAvroModel.Builder clearOrderStatus() {
      orderStatus = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'items' field.
      * @return The value.
      */
    public java.util.List<com.mwc.kafka.order.avro.model.OrderItem> getItems() {
      return items;
    }


    /**
      * Sets the value of the 'items' field.
      * @param value The value of 'items'.
      * @return This builder.
      */
    public com.mwc.kafka.order.avro.model.OrderCreateAvroModel.Builder setItems(java.util.List<com.mwc.kafka.order.avro.model.OrderItem> value) {
      validate(fields()[9], value);
      this.items = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'items' field has been set.
      * @return True if the 'items' field has been set, false otherwise.
      */
    public boolean hasItems() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'items' field.
      * @return This builder.
      */
    public com.mwc.kafka.order.avro.model.OrderCreateAvroModel.Builder clearItems() {
      items = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public OrderCreateAvroModel build() {
      try {
        OrderCreateAvroModel record = new OrderCreateAvroModel();
        record.id = fieldSetFlags()[0] ? this.id : (java.util.UUID) defaultValue(fields()[0]);
        record.sagaId = fieldSetFlags()[1] ? this.sagaId : (java.util.UUID) defaultValue(fields()[1]);
        record.createdAt = fieldSetFlags()[2] ? this.createdAt : (java.time.Instant) defaultValue(fields()[2]);
        record.customerId = fieldSetFlags()[3] ? this.customerId : (java.util.UUID) defaultValue(fields()[3]);
        record.customerAddress = fieldSetFlags()[4] ? this.customerAddress : (java.lang.String) defaultValue(fields()[4]);
        record.warehouseId = fieldSetFlags()[5] ? this.warehouseId : (java.util.UUID) defaultValue(fields()[5]);
        record.totalAmount = fieldSetFlags()[6] ? this.totalAmount : (java.math.BigDecimal) defaultValue(fields()[6]);
        record.shippingCost = fieldSetFlags()[7] ? this.shippingCost : (java.math.BigDecimal) defaultValue(fields()[7]);
        record.orderStatus = fieldSetFlags()[8] ? this.orderStatus : (com.mwc.kafka.order.avro.model.OrderStatus) defaultValue(fields()[8]);
        record.items = fieldSetFlags()[9] ? this.items : (java.util.List<com.mwc.kafka.order.avro.model.OrderItem>) defaultValue(fields()[9]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<OrderCreateAvroModel>
    WRITER$ = (org.apache.avro.io.DatumWriter<OrderCreateAvroModel>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<OrderCreateAvroModel>
    READER$ = (org.apache.avro.io.DatumReader<OrderCreateAvroModel>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










